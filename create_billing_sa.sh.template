#!/bin/bash

# --- Configuration Items ---
# GCP project ID where the service account will be created
PROJECT_ID="YOUR_PROJECT_ID"

# Service account ID to create (e.g., billing-reader-sa)
SERVICE_ACCOUNT_ID="billing-reader-sa"

# Display name for the service account
SERVICE_ACCOUNT_DISPLAY_NAME="Billing Reader Service Account"

# File path to save the generated service account key
KEY_FILE_PATH="./gcp_billing_credentials.json"

# Billing account ID to grant IAM roles
BILLING_ACCOUNT_ID="YOUR_BILLING_ACCOUNT_ID"

# IAM roles to grant
IAM_ROLE="roles/billing.viewer"
BIGQUERY_DATA_VIEWER_ROLE="roles/bigquery.dataViewer"
BIGQUERY_USER_ROLE="roles/bigquery.user"
# --- End of Configuration ---

# Full email address of the service account
SERVICE_ACCOUNT_EMAIL="${SERVICE_ACCOUNT_ID}@${PROJECT_ID}.iam.gserviceaccount.com"

echo "Starting process with the following configuration:"
echo "  Project ID: ${PROJECT_ID}"
echo "  Service Account ID: ${SERVICE_ACCOUNT_ID}"
echo "  Service Account Display Name: ${SERVICE_ACCOUNT_DISPLAY_NAME}"
echo "  Service Account Email: ${SERVICE_ACCOUNT_EMAIL}"
echo "  Key File Path: ${KEY_FILE_PATH}"
echo "  Billing Account ID: ${BILLING_ACCOUNT_ID}"
echo "  IAM Role: ${IAM_ROLE}"
echo "  BigQuery Data Viewer Role: ${BIGQUERY_DATA_VIEWER_ROLE}"
echo "  BigQuery User Role: ${BIGQUERY_USER_ROLE}"
echo ""
read -p "Do you want to proceed? (y/N): " confirmation
if [[ "$confirmation" != "y" && "$confirmation" != "Y" ]]; then
    echo "Process cancelled."
    exit 1
fi

echo ""
echo "1. Creating service account..."
# Check if service account exists
if gcloud iam service-accounts describe "${SERVICE_ACCOUNT_EMAIL}" --project="${PROJECT_ID}" >/dev/null 2>&1; then
    echo "Service account ${SERVICE_ACCOUNT_EMAIL} already exists. Will update."
else
    echo "Service account ${SERVICE_ACCOUNT_EMAIL} does not exist. Creating..."
    gcloud iam service-accounts create "${SERVICE_ACCOUNT_ID}" \
        --project="${PROJECT_ID}" \
        --display-name="${SERVICE_ACCOUNT_DISPLAY_NAME}"
fi

if [ $? -ne 0 ]; then
    echo "Error: Failed to create service account."
    exit 1
fi
echo "Service account created."
echo ""

echo "2. Creating and downloading service account key..."
gcloud iam service-accounts keys create "${KEY_FILE_PATH}" \
    --iam-account="${SERVICE_ACCOUNT_EMAIL}" \
    --project="${PROJECT_ID}"

if [ $? -ne 0 ]; then
    echo "Error: Failed to create service account key."
    KEY_FILE_PATH="" # Clear path on key creation failure
fi
if [ -n "${KEY_FILE_PATH}" ]; then
    echo "Service account key saved to ${KEY_FILE_PATH}."
    echo ""
fi


echo "3. Granting IAM permissions to billing account..."
gcloud billing accounts add-iam-policy-binding "${BILLING_ACCOUNT_ID}" \
    --member="serviceAccount:${SERVICE_ACCOUNT_EMAIL}" \
    --role="${IAM_ROLE}"

if [ $? -eq 0 ]; then
    echo "  Granting BigQuery Data Viewer role..."
    gcloud projects add-iam-policy-binding "${PROJECT_ID}" \
        --member="serviceAccount:${SERVICE_ACCOUNT_EMAIL}" \
        --role="${BIGQUERY_DATA_VIEWER_ROLE}"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to grant BigQuery Data Viewer role."
    else
        echo "BigQuery Data Viewer role granted."
    fi

    echo "  Granting BigQuery User role..."
    gcloud projects add-iam-policy-binding "${PROJECT_ID}" \
        --member="serviceAccount:${SERVICE_ACCOUNT_EMAIL}" \
        --role="${BIGQUERY_USER_ROLE}"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to grant BigQuery User role."
    else
        echo "BigQuery User role granted."
    fi
fi

if [ $? -ne 0 ]; then
    echo "Error: Failed to grant IAM permissions to billing account."
    echo "You may need to manually grant permissions from the GCP console."
    # If key file was created, inform the user
    if [ -n "${KEY_FILE_PATH}" ] && [ -f "${KEY_FILE_PATH}" ]; then
        echo "Service account and key file (${KEY_FILE_PATH}) have been created."
        echo "Please grant ${IAM_ROLE} permission for billing account ${BILLING_ACCOUNT_ID} to service account ${SERVICE_ACCOUNT_EMAIL} in the GCP console."
    fi
    exit 1
fi
echo "IAM permissions granted to billing account."
echo ""

echo "Process completed successfully."
if [ -n "${KEY_FILE_PATH}" ] && [ -f "${KEY_FILE_PATH}" ]; then
  echo "Service account key is saved at ${KEY_FILE_PATH}."
  echo "Please set this key file to the GCP_CREDENTIALS environment variable in lambda_function."
fi